package UI;

import dao.ServerInterface;
import leg.Leg;
import leg.Legs;
import utils.LocalFlightDatabase;

import javax.swing.*;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

public class ReservationApp {
    // Automatically generated variables for handling Swing components in the GUI Builder
    private JComboBox seatingTypeComboBox;
    private JButton addFlightToCartButton;
    private JButton viewFullFlightDetailsButton;
    private JButton quitButton;
    private JButton resetButton;
    private JButton searchForFlightsButton;
    private JPanel mainPanel;
    private JFormattedTextField departureDateFormattedTextField;
    private JFormattedTextField arrivalDateFormattedTextField;
    private JFormattedTextField departureAirportFormattedTextField;
    private JFormattedTextField arrivalAirportFormattedTextField;
    private JFormattedTextField maximumLayoversFormattedTextField;
    private JFormattedTextField numberOfPassengersFormattedTextField;
    private JTable flightDisplayTable;
    private JFrame frameHandle;

    // List of UI components which should be inactive during long operations to prevent user input
    // and signal to the user that the program is busy
    private List<JComponent> busyList = new ArrayList<>();

    // Table columns initialized for flight display
    private TableColumn prices = new TableColumn();
    private TableColumn departureAirports = new TableColumn();
    private TableColumn arrivalAirports = new TableColumn();
    private TableColumn departureDates = new TableColumn();
    private TableColumn arrivalDates = new TableColumn();
    private TableColumn flightNumbers = new TableColumn();
    private TableColumn planes  = new TableColumn();

    // Container that stores the current state of user input and validates new input
    private static UIModel model;

    /**
     * Main method is required by JavaFX, which is used by the GUI Designer,
     * but is not needed for any other reason
     *
     * @param args String []
     */
    public static void main(String[] args) {

    }

    /**
     * Creates the GUI window, adds components, and populates default values.
     * Also, stores a reference to a UIData object for storage and validation of input
     *
     * @param newModel is an instantiation of UIData
     */
    public void initializeUIElements(UIModel newModel) {
        // If no model is provided, initialize a new one
        if (model == null)
            model = new UIModel();
        else
            model = newModel;

        // Create the JFrame and JComponents
        initializeWindow();

        // Create the list of JComponents that should be disabled while the app is busy
        buildBusyList();

        // Set the default seating types
        //seatingTypeComboBox.setModel(new DefaultComboBoxModel<String>(model.getSeatingPossibilities()));

        // Set the columns of the table


        System.out.println("Finished Initialization");
    }

    /**
     * Constructor method automatically generated by GUI Designer when adding listeners.
     * The contents of the overriden methods have been modified to respond appropriately to user interaction
     */
    public ReservationApp() {

        //When the search button is pressed, set the busy status to true
        //The status should remain true until the search is completed or the operation is canceled
        searchForFlightsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Execute search functionality here
                System.out.println("Search Button User Interaction");
                busy(true);
                if(model.departureAirport() != null && model.departureDate() != null) {
                    Legs legs = ServerInterface.INSTANCE.getDepartingLegs(model.departureAirport(), model.departureDate());
                    if(legs != null) {
                        for (Leg leg : legs) {
                            System.out.println(leg.toString());
                        }
                    }else
                        System.out.println("No departing flights were found for that date and airport");
                }else
                    System.out.println("Departure airport or departure date is empty, cannot search for flights");
                busy(false);
            }
        });

        // When any text field is changed, attempt to overwrite the value in the model.
        //Then, get the validated value stored in the model to update the display of the component.
        departureAirportFormattedTextField.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                model.setDepartureAirport(departureAirportFormattedTextField.getText());
                departureAirportFormattedTextField.setText(model.getDepartureAirport());
            }
        });
        arrivalAirportFormattedTextField.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                model.setArrivalAirport(arrivalAirportFormattedTextField.getText());
                arrivalAirportFormattedTextField.setText(model.getArrivalAirport());
            }
        });
        departureDateFormattedTextField.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                model.setDepartureDate(departureDateFormattedTextField.getText());
                departureDateFormattedTextField.setText(model.getDepartureDate());
            }
        });
        arrivalDateFormattedTextField.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                model.setArrivalDate(arrivalDateFormattedTextField.getText());
                arrivalDateFormattedTextField.setText(model.getArrivalDate());
            }
        });
        numberOfPassengersFormattedTextField.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                model.setNumberOfPassengers(numberOfPassengersFormattedTextField.getText());
                numberOfPassengersFormattedTextField.setText(model.getNumberOfPassengers());
            }
        });
        maximumLayoversFormattedTextField.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                model.setNumberOfLayovers(maximumLayoversFormattedTextField.getText());
                maximumLayoversFormattedTextField.setText(model.getNumberOfLayovers());
            }
        });

        // When the reset button is pressed, reinitialize the GUI
        // This will force any disabled JComponents to re-enable and reset model values to the default
        resetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Reset User Interaction");
                initializeUIElements(new UIModel());
            }
        });

        // When the quit button is pressed, exit the program
        quitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        seatingTypeComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //model.setSeatingType(seatingTypeComboBox.getSelectedItem().toString());
            }
        });
    }

    /**
     * Creates the GUI JFrame and builds all of the JComponents.
     * All of the hidden source code is implemented during the 'setContentPane' function
     */
    private void initializeWindow() {
        if (frameHandle != null)
            frameHandle.dispose();
        frameHandle = new JFrame("ReservationApp");
        frameHandle.setContentPane(new ReservationApp().mainPanel);
        frameHandle.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frameHandle.pack();
        frameHandle.setVisible(true);
    }


    /**
     * Creates a list of essential user interactions that should be disabled during long operations.
     * Visually shows the user that the program is busy, and prevents confusing input
     */
    private void buildBusyList() {
        busyList.add(seatingTypeComboBox);
        busyList.add(addFlightToCartButton);
        busyList.add(viewFullFlightDetailsButton);
        busyList.add(searchForFlightsButton);
        busyList.add(departureAirportFormattedTextField);
        busyList.add(arrivalAirportFormattedTextField);
        busyList.add(departureDateFormattedTextField);
        busyList.add(arrivalDateFormattedTextField);
        busyList.add(maximumLayoversFormattedTextField);
        busyList.add(numberOfPassengersFormattedTextField);
        busy(false);
    }

    /**
     * Iterates over the list of important JComponents to disable/enable them
     *
     * @param tf a boolean where true represents busy state (disabled) and false represents free (enabled)
     */
    private void busy(boolean tf) {
        for (JComponent element : busyList) {
            element.setEnabled(!tf);
        }
    }

}
